using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Demo.Core.Data;
using Demo.Core.Domain.Orders;
using Demo.Core.Domain.Products;
using Demo.Core.Services.Authentication;
using Demo.Core.Services.Products;
using Microsoft.EntityFrameworkCore;

namespace Demo.Core.Services.Orders
{
    public class OrderService : IOrderService
    {
        private readonly IDbContext _context;
        private readonly IAuthenticationService _authenticationService;
        private readonly IConfigurationProvider _configurationProvider;

        public OrderService(IDbContext context, IAuthenticationService authenticationService, IConfigurationProvider configurationProvider)
        {
            _context = context;
            _authenticationService = authenticationService;
            _configurationProvider = configurationProvider;
        }

        /// <summary>
        /// Gets a list of products.
        /// </summary>
        /// <param name="email">Customer email.</param>
        /// <param name="pageIndex">Current page.</param>
        /// <param name="pageSize">Page size.</param>
        /// <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
        /// <returns></returns>
        public async Task<IList<OrderModel>> GetListAsync(
            string email = "",
            int pageIndex = 0, int pageSize = 10,
            CancellationToken cancellationToken = default)
        {

            var query = _context.TableReadonly<Order>()
                .Include(o => o.OrderItems).AsQueryable();

            if (!string.IsNullOrWhiteSpace(email))
                query = query.Where(o => o.Email == email);
            else
            {
                var customer = await _authenticationService.GetAuthenticatedCustomerAsync();
                if (customer != null)
                    query = query.Where(o => o.CustomerId == customer.Id);
            }

            var list = await query
                .ProjectTo<OrderModel>(_configurationProvider)
                .Skip(pageSize * pageIndex)
                .Take(pageSize)
                .ToListAsync(cancellationToken);

            return list;
        }


        /// <summary>
        /// Creates an order.
        /// </summary>
        /// <param name="request">Request from api.</param>
        /// <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
        /// <returns></returns>
        public async Task CreateOrderAsync(CreateOrderRequest request, CancellationToken cancellationToken = default)
        {
            // create order
            var order = new Order
            {
                Email = request.Email,
                Number = 1, // supposed to be autogenerated
            };

            // check if a customer is authenticated
            var customer = await _authenticationService.GetAuthenticatedCustomerAsync();
            if (customer != null)
            {
                order.CustomerId = customer.Id;
                // if email is null from request
                if (string.IsNullOrWhiteSpace(request.Email))
                    order.Email = customer.Username;
            }

            // if no customer and email, throw
            if (customer == null && string.IsNullOrWhiteSpace(request.Email))
                throw new Exception("No point of contact for this order (Customer/email).");


            // if no items in order, throw
            if (!request.Items.Any())
                throw new Exception("No items in order.");

            // insert order
            await _context.Set<Order>().AddAsync(order, cancellationToken);

            // add all items to the context
            foreach (var requestItem in request.Items)
            {
                var entityOrderItem = new OrderItem
                {
                    ProductId = requestItem.ProductId,
                    Order = order
                };

                if (!requestItem.ProductId.HasValue)
                {
                    entityOrderItem.Name = requestItem.ProductName;
                    entityOrderItem.Amount = requestItem.Amount;
                }
                else
                {
                    var product = await _context.TableReadonly<Product>()
                        .FirstOrDefaultAsync(p => p.Id == requestItem.ProductId, cancellationToken: cancellationToken);

                    entityOrderItem.Name = product.Name;
                    entityOrderItem.Amount = product.Price;
                }

                await _context.Set<OrderItem>().AddAsync(entityOrderItem, cancellationToken);
            }

            // save changes
            await _context.SaveChangesAsync(cancellationToken);
        }
    }
}